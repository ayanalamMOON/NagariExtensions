{
    "Function Definition": {
        "prefix": "def",
        "body": [
            "def ${1:function_name}(${2:parameters}):",
            "    ${3:pass}"
        ],
        "description": "Define a function"
    },
    "Async Function Definition": {
        "prefix": "adef",
        "body": [
            "async def ${1:function_name}(${2:parameters}):",
            "    ${3:pass}"
        ],
        "description": "Define an async function"
    },
    "Class Definition": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName}:",
            "    def __init__(self${2:, parameters}):",
            "        ${3:pass}"
        ],
        "description": "Define a class"
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if ${1:condition}:",
            "    ${2:pass}"
        ],
        "description": "If statement"
    },
    "If-Else Statement": {
        "prefix": "ifelse",
        "body": [
            "if ${1:condition}:",
            "    ${2:pass}",
            "else:",
            "    ${3:pass}"
        ],
        "description": "If-else statement"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for ${1:item} in ${2:iterable}:",
            "    ${3:pass}"
        ],
        "description": "For loop"
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "while ${1:condition}:",
            "    ${2:pass}"
        ],
        "description": "While loop"
    },
    "Try-Except": {
        "prefix": "try",
        "body": [
            "try:",
            "    ${1:pass}",
            "except ${2:Exception} as ${3:e}:",
            "    ${4:pass}"
        ],
        "description": "Try-except block"
    },
    "List Comprehension": {
        "prefix": "lc",
        "body": [
            "[${1:expression} for ${2:item} in ${3:iterable}${4: if ${5:condition}}]"
        ],
        "description": "List comprehension"
    },
    "Dictionary Comprehension": {
        "prefix": "dc",
        "body": [
            "{${1:key}: ${2:value} for ${3:item} in ${4:iterable}${5: if ${6:condition}}}"
        ],
        "description": "Dictionary comprehension"
    },
    "Main Function": {
        "prefix": "main",
        "body": [
            "def main():",
            "    ${1:pass}",
            "",
            "if __name__ == \"__main__\":",
            "    main()"
        ],
        "description": "Main function pattern"
    },
    "Import Statement": {
        "prefix": "import",
        "body": [
            "import ${1:module}"
        ],
        "description": "Import statement"
    },
    "From Import": {
        "prefix": "from",
        "body": [
            "from ${1:module} import ${2:item}"
        ],
        "description": "From import statement"
    },
    "React Component": {
        "prefix": "reactcomp",
        "body": [
            "def ${1:ComponentName}({ ${2:props} }):",
            "    return (",
            "        <div${3: className=\"${4:class-name}\"}>${5:}",
            "            ${6:// Component content}",
            "        </div>",
            "    )"
        ],
        "description": "React component function"
    },
    "React Hook useState": {
        "prefix": "usestate",
        "body": [
            "${1:state}, ${2:setState} = useState(${3:initialValue})"
        ],
        "description": "React useState hook"
    },
    "React Hook useEffect": {
        "prefix": "useeffect",
        "body": [
            "useEffect(() => {",
            "    ${1:// Effect logic}",
            "}, [${2:dependencies}])"
        ],
        "description": "React useEffect hook"
    },
    "Async Function with Try-Catch": {
        "prefix": "asynctry",
        "body": [
            "async def ${1:function_name}(${2:parameters}):",
            "    try:",
            "        ${3:// Async operation}",
            "        result = await ${4:async_operation()}",
            "        return result",
            "    except Exception as e:",
            "        ${5:// Error handling}",
            "        print(f\"Error: {e}\")"
        ],
        "description": "Async function with error handling"
    },
    "F-String": {
        "prefix": "fstr",
        "body": [
            "f\"${1:text} {${2:variable}} ${3:more text}\""
        ],
        "description": "F-string formatting"
    },
    "Match Statement": {
        "prefix": "match",
        "body": [
            "match ${1:value}:",
            "    case ${2:pattern1}:",
            "        ${3:pass}",
            "    case ${4:pattern2}:",
            "        ${5:pass}",
            "    case _:",
            "        ${6:pass}"
        ],
        "description": "Match statement (pattern matching)"
    },
    "Express Route Handler": {
        "prefix": "route",
        "body": [
            "@app.${1:get}(\"${2:/path}\")",
            "def ${3:handler_name}(req, res):",
            "    ${4:// Route logic}",
            "    res.json({\"message\": \"${5:response}\"})"
        ],
        "description": "Express route handler"
    },
    "Fibonacci Function": {
        "prefix": "fibonacci",
        "body": [
            "def fibonacci(n: int) -> int:",
            "    if n <= 1:",
            "        return n",
            "    return fibonacci(n - 1) + fibonacci(n - 2)"
        ],
        "description": "Fibonacci function implementation"
    },
    "Generator Function": {
        "prefix": "gen",
        "body": [
            "def ${1:generator_name}(${2:parameters}):",
            "    ${3:# Generator logic}",
            "    yield ${4:value}"
        ],
        "description": "Generator function"
    },
    "Context Manager": {
        "prefix": "with",
        "body": [
            "with ${1:context} as ${2:variable}:",
            "    ${3:pass}"
        ],
        "description": "Context manager (with statement)"
    },
    "Lambda Function": {
        "prefix": "lambda",
        "body": [
            "lambda ${1:args}: ${2:expression}"
        ],
        "description": "Lambda function"
    },
    "Property Decorator": {
        "prefix": "property",
        "body": [
            "@property",
            "def ${1:property_name}(self):",
            "    return self._${1:property_name}",
            "",
            "@${1:property_name}.setter",
            "def ${1:property_name}(self, value):",
            "    self._${1:property_name} = value"
        ],
        "description": "Property with getter and setter"
    },
    "Dataclass": {
        "prefix": "dataclass",
        "body": [
            "@dataclass",
            "class ${1:ClassName}:",
            "    ${2:field}: ${3:type} = ${4:default_value}"
        ],
        "description": "Dataclass definition"
    },
    "Enum Definition": {
        "prefix": "enum",
        "body": [
            "from enum import Enum",
            "",
            "class ${1:EnumName}(Enum):",
            "    ${2:VALUE1} = \"${3:value1}\"",
            "    ${4:VALUE2} = \"${5:value2}\""
        ],
        "description": "Enum class definition"
    },
    "Type Hints Function": {
        "prefix": "typehint",
        "body": [
            "def ${1:function_name}(${2:param}: ${3:type}) -> ${4:return_type}:",
            "    ${5:pass}"
        ],
        "description": "Function with type hints"
    },
    "Decorator Function": {
        "prefix": "decorator",
        "body": [
            "def ${1:decorator_name}(func):",
            "    def wrapper(*args, **kwargs):",
            "        ${2:# Pre-processing}",
            "        result = func(*args, **kwargs)",
            "        ${3:# Post-processing}",
            "        return result",
            "    return wrapper"
        ],
        "description": "Custom decorator function"
    },
    "API Endpoint": {
        "prefix": "api",
        "body": [
            "@app.${1:post}(\"${2:/api/endpoint}\")",
            "async def ${3:endpoint_name}(request):",
            "    data = await request.json()",
            "    ${4:# Process data}",
            "    return {\"status\": \"success\", \"data\": ${5:result}}"
        ],
        "description": "API endpoint handler"
    },
    "Database Model": {
        "prefix": "model",
        "body": [
            "class ${1:ModelName}:",
            "    def __init__(self, ${2:parameters}):",
            "        ${3:# Initialize model}",
            "        pass",
            "    ",
            "    def save(self):",
            "        ${4:# Save to database}",
            "        pass",
            "    ",
            "    @classmethod",
            "    def find_by_id(cls, id):",
            "        ${5:# Find by ID}",
            "        pass"
        ],
        "description": "Database model class"
    },
    "Test Function": {
        "prefix": "test",
        "body": [
            "def test_${1:function_name}():",
            "    # Arrange",
            "    ${2:# Setup test data}",
            "    ",
            "    # Act",
            "    result = ${3:function_to_test()}",
            "    ",
            "    # Assert",
            "    assert result == ${4:expected_value}"
        ],
        "description": "Unit test function"
    },
    "JSX Element": {
        "prefix": "jsx",
        "body": [
            "<${1:Element}${2: ${3:props}}>${4:children}</${1:Element}>"
        ],
        "description": "JSX element"
    },
    "Console Log": {
        "prefix": "log",
        "body": [
            "console.log(${1:value})"
        ],
        "description": "Console log statement"
    },
    "Error Handling": {
        "prefix": "error",
        "body": [
            "try:",
            "    ${1:# Risky operation}",
            "except ${2:SpecificError} as e:",
            "    logger.error(f\"${3:Error message}: {e}\")",
            "    ${4:# Handle specific error}",
            "except Exception as e:",
            "    logger.error(f\"Unexpected error: {e}\")",
            "    ${5:# Handle general error}"
        ],
        "description": "Comprehensive error handling"
    }
}
